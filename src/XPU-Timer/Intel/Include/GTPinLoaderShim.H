// Copyright (C) 2022 Intel Corporation
// SPDX-License-Identifier: BSD-3-Clause

#ifndef GTPIN_LOADER_SHIM_H
#define  GTPIN_LOADER_SHIM_H

#include <iostream>
#include <dlfcn.h>
#include "pin.H"
//#include "gtpin.h"
#include "api/gtpin_api.h"
#include "GTPinShim.h"

using namespace std;

class GTPIN_LOADER
{

private:
  static AFUNPTR dlopen_addr;
  static AFUNPTR dlsym_addr;
  static AFUNPTR dlerror_addr;
  static std::ostream* out;
  static KNOB<BOOL> KnobVerbose;
  static KNOB<string> KnobGTPinTool;
  static KNOB<string> KnobGTPinDir;
  static KNOB<string> KnobGTPinArg;
  static UINT32 gtpin_argc;
  static const char ** gtpin_argv;
  static cpu_on_xpu_event_ptr_t callback_on_xpu_event;
  static cpu_on_gpu_init_ptr_t callback_on_gpu_init;
  static cpu_on_gpu_fini_ptr_t callback_on_gpu_fini;

  static VOID Error(const char * errstring)
  {
    fprintf(stderr, "%s\n", errstring);
    exit(1);
  }

  typedef VOID (*FP_INIT)(void);
  typedef   void *(*dlopen_ptr_t)(const char * const , int );
  typedef void *(*dlsym_ptr_t)(void *, const char * );
  typedef char *(*dlerror_ptr_t)(void );
  typedef void (*gtpin_entry_t)(int , const char *[]);
  typedef void (*gtpin_register_t)(cpu_on_xpu_event_ptr_t, cpu_on_gpu_init_ptr_t, cpu_on_gpu_fini_ptr_t) ;

  static VOID GTPinLoader(const void* img_name)
  {
    static bool init = false;

    if (init)          return;
    if (!dlopen_addr)  return;

    dlopen_ptr_t  dlopen_ptr   = (dlopen_ptr_t)dlopen_addr;
    dlsym_ptr_t   dlsym_ptr    = (dlsym_ptr_t)dlsym_addr;
    //dlerror_ptr_t dlerror_ptr  = (dlerror_ptr_t)dlerror_addr;

    // Load the GTPpin tool
    void *handle = (*dlopen_ptr)( KnobGTPinTool.Value().c_str(), RTLD_LAZY);
    if(KnobVerbose) fprintf(stderr, "found %s %lx\n", KnobGTPinTool.Value().c_str(), (UINT64)handle);

    // Retrieve address of GTPinShimRegisterCallbacks in the GTPpin tool
    gtpin_register_t gtpin_register_ptr = (gtpin_register_t)(*dlsym_ptr)(handle, "GTPinShimRegisterCallbacks");
    if(KnobVerbose) fprintf(stderr, "found %s %lx\n", "GTPinShimRegisterCallbacks", (UINT64)gtpin_register_ptr);

    // Call GTPinShimRegisterCallbacks to register on_kernel_* callbacks
   if(gtpin_register_ptr)
     (*gtpin_register_ptr)(callback_on_xpu_event, callback_on_gpu_init, callback_on_gpu_fini);
    else
      fprintf(stderr, "Skipping GTPinShimRegisterCallbacks() call");

    // Retrieve address of GTPin_Entry in the GTPpin tool
    gtpin_entry_t gtpin_entry_ptr = (gtpin_entry_t)(*dlsym_ptr)(handle, "GTPin_Entry");
    if(KnobVerbose) fprintf(stderr, "found %s %lx\n", "GTPin_Entry", (UINT64)gtpin_entry_ptr);

    // Call GTPin_Entry to start GTPin tool
   if(gtpin_entry_ptr)
      (*gtpin_entry_ptr)(gtpin_argc, gtpin_argv );
   else
      fprintf(stderr, "Skipping GTPin_Entry() call");

    init = true;
  }

  static VOID LibdlInitProbeGTPinLoader(FP_INIT origInit)
  {
    origInit();

    if(KnobVerbose) *out << "LibdlInitProbeGTPinLoader called" << endl;
    GTPinLoader("libdl.so");
  }

  static VOID imageProbe(IMG img, VOID *arg)
  {
    const char* dynloaderImageName = "libdl";
    const char* libcImageName      = "libc";
    const char* dlopenFuncName = "dlopen";
    const char* dlsymFuncName = "dlsym";
    const char* dlerrorFuncName = "dlerror";
    static bool _initFound = false;

    string imgName = IMG_Name(img);
        if(KnobVerbose) *out << "Loaded image: " << imgName << endl;

    // The dynamic linking loader interface, which includes three functions: dlopen, dlsym and dlerror, 
    // can be defined in either libdl or libc library. It is assumed that all three functions are defined
    // in the same library.
    if (!dlopen_addr)
    {
        if (imgName.find(dynloaderImageName) != string::npos ||
            imgName.find(libcImageName) != string::npos)
        {
          RTN rtn = RTN_FindByName(img, dlopenFuncName);
          if (!RTN_Valid(rtn))
          {
            return;
          }

        dlopen_addr = RTN_Funptr(rtn);

        rtn = RTN_FindByName(img, dlsymFuncName);
        if (!RTN_Valid(rtn))
            Error("Unable to find dlsym function");
        else
            if(KnobVerbose) fprintf(stderr, "found %s \n", dlsymFuncName);

        dlsym_addr = RTN_Funptr(rtn);

        rtn = RTN_FindByName(img, dlerrorFuncName);
        if (!RTN_Valid(rtn))
            Error("Unable to find dlerror function");
        else
            if(KnobVerbose) fprintf(stderr, "found %s \n", dlerrorFuncName);

        dlerror_addr = RTN_Funptr(rtn);
        RTN initRtn = RTN_FindByName(img, "_init");
        if (RTN_Valid(initRtn))
        {
            if(KnobVerbose) *out << "_init 0x" << std::hex << RTN_Address(initRtn) << " given name:" << RTN_Name(initRtn) << " in image " << IMG_Name(img) << endl;
            if (RTN_IsSafeForProbedReplacement(initRtn))
            {
                // Define a function prototype that describes the application routine that will be replaced.
                PROTO proto_init = PROTO_Allocate(PIN_PARG(void), CALLINGSTD_DEFAULT, "_init", PIN_PARG_END());

                // Replace Replace libdl._init with the replacement function, and pass pointer original function as a parameter.
                RTN_ReplaceSignatureProbed(initRtn, AFUNPTR(LibdlInitProbeGTPinLoader), IARG_PROTOTYPE, proto_init, IARG_ORIG_FUNCPTR, IARG_END);

                // Free the function prototype.
                PROTO_Free(proto_init);
                _initFound = true;
            }
            else
            {
                    *out << "Skip replacing _init in " << imgName << " since it is not safe." << endl;
            }
        }
        else
        {
          *out << "_init not found in " << imgName << endl;
        }
      }
        if (_initFound) return;
    }

    if (!IMG_IsMainExecutable(img))
    {
        return;
    }

    // Add probe at first instruction in the image
    ADDRINT entry = IMG_EntryAddress(img);
    
    RTN firstInstructionRtn = RTN_FindByAddress(entry);
    if (!RTN_Valid(firstInstructionRtn))
    {
        firstInstructionRtn = RTN_CreateAt(entry, string("main-entry"));
        if (!RTN_Valid(firstInstructionRtn))
            Error("Unable to find routine for first instruction (Image entry) executed in image");
    }
    
    if (RTN_IsSafeForProbedInsertion(firstInstructionRtn) == false)
    {
        //Error("can not inject gtpin to image " + imgName);
        fprintf(stderr, "can not inject gtpin to image  + %s\n", imgName.c_str());
        return;
    }

    if(KnobVerbose) *out << "At image: " << IMG_Name(img) << " (" << entry <<")" << " Inserting probe to gtpin loader at (init) 0x" << std::hex << RTN_Address(firstInstructionRtn) << endl;
    RTN_InsertCallProbed(firstInstructionRtn, IPOINT_BEFORE, (AFUNPTR)GTPinLoader, IARG_PTR, strdup(imgName.c_str()), IARG_END);

    // Add probe at _start
    RTN startRtn = RTN_FindByName(img, "_start");
    if (!RTN_Valid(startRtn))
    {
        startRtn = RTN_CreateAt(entry, string("main-entry"));
        if (!RTN_Valid(startRtn))
            Error("Unable to find routine for _start in the image");
    }

    // Insert probe only if routines are different - prevent duplicate probe at same location
    if (RTN_Address(startRtn) != RTN_Address(firstInstructionRtn))
    {
      if(KnobVerbose) *out << "Inserting probe to gtpin loader at (start) 0x" << std::hex << RTN_Address(startRtn) << endl;
      RTN_InsertCallProbed(startRtn, IPOINT_BEFORE, (AFUNPTR)GTPinLoader, IARG_PTR, strdup(imgName.c_str()), IARG_END);
    }
    else 
    {
        if(KnobVerbose) *out << "_start and Image entry are at the same address - skipping second probe" << endl;
    }
  }


  static VOID imageJIT(IMG img, VOID *arg)
  {
    const char* dynloaderImageName = "libdl";
    const char* libcImageName      = "libc";
    const char* dlopenFuncName = "dlopen";
    const char* dlsymFuncName = "dlsym";
    const char* dlerrorFuncName = "dlerror";

    string imgName = IMG_Name(img);
        if(KnobVerbose) *out << "Loaded image: " << imgName << endl;

    // The dynamic linking loader interface, which includes three functions: dlopen, dlsym and dlerror, 
    // can be defined in either libdl or libc library. It is assumed that all three functions are defined
    // in the same library.
    if (!dlopen_addr)
    {
      if (imgName.find(dynloaderImageName) != string::npos ||
            imgName.find(libcImageName) != string::npos)
      {
        RTN rtn = RTN_FindByName(img, dlopenFuncName);
        if (RTN_Valid(rtn))
        {
          dlopen_addr = RTN_Funptr(rtn);

          rtn = RTN_FindByName(img, dlsymFuncName);
          if (!RTN_Valid(rtn))
              Error("Unable to find dlsym function");
          else
            if(KnobVerbose) fprintf(stderr, "found %s \n", dlsymFuncName);

          dlsym_addr = RTN_Funptr(rtn);

          rtn = RTN_FindByName(img, dlerrorFuncName);
          if (!RTN_Valid(rtn))
            Error("Unable to find dlerror function");
          else
            if(KnobVerbose) fprintf(stderr, "found %s \n", dlerrorFuncName);

          dlerror_addr = RTN_Funptr(rtn);
        }
      }
    }

    if (!IMG_IsMainExecutable(img))
    {
        return;
    }

    // Add probe at first instruction in the image
    ADDRINT entry = IMG_EntryAddress(img);
    
    RTN firstInstructionRtn = RTN_FindByAddress(entry);
    if (!RTN_Valid(firstInstructionRtn))
    {
        firstInstructionRtn = RTN_CreateAt(entry, string("main-entry"));
        if (!RTN_Valid(firstInstructionRtn))
            Error("Unable to find routine for first instruction (Image entry) executed in image");
    }
    
    if(KnobVerbose) *out << "At image: " << IMG_Name(img) << " (" << entry <<")" << " Inserting call to gtpin loader before (init) 0x" << std::hex << RTN_Address(firstInstructionRtn) << endl;
    RTN_Open(firstInstructionRtn);
    RTN_InsertCall(firstInstructionRtn, IPOINT_BEFORE, AFUNPTR(GTPinLoader), IARG_END);
    RTN_Close(firstInstructionRtn);

    // Add probe at _start
    RTN startRtn = RTN_FindByName(img, "_start");
    if (!RTN_Valid(startRtn))
    {
        startRtn = RTN_CreateAt(entry, string("main-entry"));
        if (!RTN_Valid(startRtn))
            Error("Unable to find routine for _start in the image");
    }

    // Insert probe only if routines are different - prevent duplicate probe at same location
    if (RTN_Address(startRtn) != RTN_Address(firstInstructionRtn))
    {
      if(KnobVerbose) *out << "Inserting call to gtpin loader at (start) 0x" << std::hex << RTN_Address(startRtn) << endl;
      //JIT mode
      RTN_Open(startRtn);
      RTN_InsertCall(startRtn, IPOINT_BEFORE, AFUNPTR(GTPinLoader), IARG_END);
      RTN_Close(startRtn);
    }
    else 
    {
        if(KnobVerbose) *out << "_start and Image entry are at the same address - skipping inserting call to gtpin loader the second time" << endl;
    }
  }

public:
  static KNOB<BOOL> KnobProbe;
  GTPIN_LOADER()
  {
  }
  int Activate(cpu_on_xpu_event_ptr_t on_xpu_event, cpu_on_gpu_init_ptr_t on_gpu_init, cpu_on_gpu_fini_ptr_t on_gpu_fini)
  {
    callback_on_xpu_event = on_xpu_event;
    callback_on_gpu_init = on_gpu_init;
    callback_on_gpu_fini = on_gpu_fini;
    if (strcmp(KnobGTPinTool.Value().c_str(),"") == 0)
    {
      *out << "Use '-gtpintool <path to gtpin tool>" << endl;
      return 0;
    }
    if (strcmp(KnobGTPinDir.Value().c_str(),"") == 0)
    {
      *out << "Use '-gtpindir <path to gtpin root>" << endl;
      return 0;
    }
    if (KnobGTPinArg.NumberOfValues() > 0)
    {
      gtpin_argc = KnobGTPinArg.NumberOfValues();
      gtpin_argc +=  2; // for "--installDir", KnobGTPinDir
      gtpin_argv = new const char * [gtpin_argc];
      for (UINT32 i = 0; i < gtpin_argc - 2; i++)
      {
        gtpin_argv[i] = KnobGTPinArg.Value(i).c_str();
        if(KnobVerbose) *out << "gtpinarg " << i << " " << gtpin_argv[i] << endl;
      }
      gtpin_argv[gtpin_argc-2] =  "--installDir";
        if(KnobVerbose) *out << "gtpinarg " << gtpin_argc - 2 << " " << gtpin_argv[gtpin_argc - 2] << endl;
      gtpin_argv[gtpin_argc-1] =  KnobGTPinDir.Value().c_str();
        if(KnobVerbose) *out << "gtpinarg " << gtpin_argc - 1 << " " << gtpin_argv[gtpin_argc - 1] << endl;
    }
    if (KnobProbe) IMG_AddInstrumentFunction(imageProbe, 0);
    else IMG_AddInstrumentFunction(imageJIT, 0);
    return 0;
  }
};
AFUNPTR GTPIN_LOADER::dlopen_addr = (AFUNPTR)0;
AFUNPTR GTPIN_LOADER::dlsym_addr = (AFUNPTR)0;
AFUNPTR GTPIN_LOADER::dlerror_addr = (AFUNPTR)0;
std::ostream* GTPIN_LOADER::out = &cerr;
UINT32 GTPIN_LOADER::gtpin_argc = 0;
cpu_on_xpu_event_ptr_t GTPIN_LOADER::callback_on_xpu_event = 0;
cpu_on_gpu_init_ptr_t GTPIN_LOADER::callback_on_gpu_init = 0;
cpu_on_gpu_fini_ptr_t GTPIN_LOADER::callback_on_gpu_fini = 0;
const char ** GTPIN_LOADER::gtpin_argv = (const char **)NULL;
// Static knobs
KNOB<BOOL> GTPIN_LOADER::KnobProbe (KNOB_MODE_WRITEONCE,
    "pintool",
    "probemode", "1", "Using Pin Probe mode");
KNOB<BOOL> GTPIN_LOADER::KnobVerbose (KNOB_MODE_WRITEONCE,
    "pintool",
    "verbose", "0", "Verbose mode");
KNOB<string> GTPIN_LOADER::KnobGTPinTool (KNOB_MODE_WRITEONCE,
    "pintool",
    "gtpintool", "", "Path to GT-Pin tool");
KNOB<string> GTPIN_LOADER::KnobGTPinDir (KNOB_MODE_WRITEONCE,
    "pintool",
    "gtpindir", "", "Path to GT-Pin 'Profilers' directory");
KNOB<string> GTPIN_LOADER::KnobGTPinArg (KNOB_MODE_APPEND,
    "pintool",
    "gt", "", "Argument to GT-Pin tool: multiple allowed '-gt arg'... ");
#endif
